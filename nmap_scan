#!/bin/bash
#needs database update to work
#scans ips that wernt scanned before with nmap

DATABASE="/home/samba/scripts/nginx_ips.db"
ESTIMATED_SCAN_TIME_PER_IP=3  # in minutes
PAUSE_BETWEEN_SCANS=5  # in seconds

# Function to perform Nmap scan for an IP
perform_nmap_scan() {
    local ip="$1"
    local scan_results
    scan_results=$(nmap -Pn -sS --script vuln -p 1-1000 "$ip")
    echo "$scan_results"
}

# Function to update the nmap_info table
update_nmap_info() {
    local ip="$1"
    local scan_results="$2"
    sqlite3 "$DATABASE" "UPDATE nmap_info SET scanned = 1, scan_results = '$scan_results' WHERE ip = '$ip';"
}

# Main logic
ips_to_scan=$(sqlite3 "$DATABASE" "SELECT ip FROM nginx_offenders WHERE scanned = 0;")

total_ips=$(echo "$ips_to_scan" | wc -l)
current_ip=1

echo "Total IPs to be scanned: $total_ips"
echo "Estimated total time for the scan: $(($total_ips * ESTIMATED_SCAN_TIME_PER_IP)) minutes"
echo

while IFS= read -r ip; do
    echo "Scanning IP $current_ip of $total_ips: $ip"

    # Check if there's an upcoming IP
    if [ $((current_ip + 1)) -le $total_ips ]; then
        upcoming_ip=$(echo "$ips_to_scan" | awk "NR == $((current_ip + 1))")
        echo "Next in line: $upcoming_ip"
    else
        echo "No next in line."
    fi

    scan_results=$(perform_nmap_scan "$ip")

    # Check if the scan was successful
    if [ $? -eq 0 ]; then
        update_nmap_info "$ip" "$scan_results"
        current_ip=$((current_ip + 1))
        sleep $PAUSE_BETWEEN_SCANS  # Pause before moving to the next IP
        echo  # Empty line for clarity
    else
        echo "Failed to scan IP $ip. Retrying in $PAUSE_BETWEEN_SCANS seconds."
        sleep $PAUSE_BETWEEN_SCANS
    fi
done <<< "$ips_to_scan"

echo "Nmap scans completed."
